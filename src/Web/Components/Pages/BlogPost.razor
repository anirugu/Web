@page "/blog/{slug}"
@inject IBlogService BlogService
@inject NavigationManager Navigation

<PageTitle>@(post?.Title ?? "Post Not Found") - Anirudha Gupta</PageTitle>

<div class="blog-post-container">
    @if (post != null)
    {
        <nav class="blog-nav">
            <a href="/blog" class="back-link">← Back to blog</a>
        </nav>

        <article class="blog-post">
            <header class="post-header">
                <h1 class="post-title">@post.Title</h1>
                <div class="post-meta">
                    <time class="post-date" datetime="@post.PublishedDate.ToString("yyyy-MM-dd")">
                        @post.PublishedDate.ToString("MMMM d, yyyy")
                    </time>
                    <span class="post-author">by @post.Author</span>
                </div>
                @if (post.Tags.Any())
                {
                    <div class="post-tags">
                        @foreach (var tag in post.Tags)
                        {
                            <span class="tag">@tag</span>
                        }
                    </div>
                }
            </header>

            <div class="post-content">
                @((MarkupString)ConvertMarkdownToHtml(post.Content))
            </div>
        </article>

        <nav class="blog-nav-bottom">
            <a href="/blog" class="back-link">← Back to blog</a>
        </nav>
    }
    else if (isLoading)
    {
        <div class="loading">Loading...</div>
    }
    else
    {
        <div class="not-found">
            <h1>Post Not Found</h1>
            <p>The blog post you're looking for doesn't exist.</p>
            <a href="/blog" class="back-link">← Back to blog</a>
        </div>
    }
</div>

@code {
    [Parameter] public string Slug { get; set; } = string.Empty;
    
    private Web.Models.BlogPost? post;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            post = await BlogService.GetPostBySlugAsync(Slug);
        }
        catch (Exception)
        {
            post = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private string ConvertMarkdownToHtml(string markdown)
    {
        // Simple markdown conversion - in a real app, use a proper markdown parser like Markdig
        var html = markdown
            .Replace("\n\n", "</p><p>")
            .Replace("\n", "<br />")
            .Replace("# ", "<h1>")
            .Replace("## ", "<h2>")
            .Replace("### ", "<h3>")
            .Replace("#### ", "<h4>");

        // Handle code blocks
        html = System.Text.RegularExpressions.Regex.Replace(html, 
            @"```(\w+)?\n(.*?)\n```", 
            "<pre><code class=\"language-$1\">$2</code></pre>", 
            System.Text.RegularExpressions.RegexOptions.Singleline);

        // Handle inline code
        html = System.Text.RegularExpressions.Regex.Replace(html, 
            @"`([^`]+)`", 
            "<code>$1</code>");

        // Handle bold text
        html = System.Text.RegularExpressions.Regex.Replace(html, 
            @"\*\*([^*]+)\*\*", 
            "<strong>$1</strong>");

        // Handle italic text
        html = System.Text.RegularExpressions.Regex.Replace(html, 
            @"\*([^*]+)\*", 
            "<em>$1</em>");

        // Handle links
        html = System.Text.RegularExpressions.Regex.Replace(html, 
            @"\[([^\]]+)\]\(([^)]+)\)", 
            "<a href=\"$2\">$1</a>");

        // Wrap in paragraphs if not already wrapped
        if (!html.StartsWith("<h") && !html.StartsWith("<p"))
        {
            html = "<p>" + html + "</p>";
        }

        return html;
    }
}